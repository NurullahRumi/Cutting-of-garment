/*Copyright (c) 2016-2017 cmt.mu All Rights Reserved.
 This software is the confidential and proprietary information of cmt.mu You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with cmt.mu*/
package com.mu.cmt.pfs.pfsdb.service;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/

import java.io.OutputStream;
import java.util.HashMap;
import java.util.Map;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;

import com.wavemaker.runtime.data.dao.query.WMQueryExecutor;
import com.wavemaker.runtime.data.export.ExportOptions;
import com.wavemaker.runtime.data.model.QueryProcedureInput;

import com.mu.cmt.pfs.pfsdb.models.query.*;

@Service
public class PfsdbQueryExecutorServiceImpl implements PfsdbQueryExecutorService {

    private static final Logger LOGGER = LoggerFactory.getLogger(PfsdbQueryExecutorServiceImpl.class);

    @Autowired
    @Qualifier("pfsdbWMQueryExecutor")
    private WMQueryExecutor queryExecutor;

    @Transactional(value = "pfsdbTransactionManager", readOnly = true)
    @Override
    public QryReturnCallPageResponse executeQryReturnCallPage(String pwmprogid, String pparamList) {
        Map<String, Object> params = new HashMap<>(2);

        params.put("pWmprogid", pwmprogid);
        params.put("pParamList", pparamList);

        return queryExecutor.executeNamedQuery("QryReturnCallPage", params, QryReturnCallPageResponse.class);
    }

    @Transactional(value = "pfsdbTransactionManager", readOnly = true)
    @Override
    public QryLectraSzeResponse executeQryLectraSze(String pdyejob, String pgmtseq, String pclrseqg, String pfabseq, String pcutseq, String pordnum) {
        Map<String, Object> params = new HashMap<>(6);

        params.put("p_dyejob", pdyejob);
        params.put("p_gmtseq", pgmtseq);
        params.put("p_clrseqg", pclrseqg);
        params.put("p_fabseq", pfabseq);
        params.put("p_cutseq", pcutseq);
        params.put("p_ordnum", pordnum);

        return queryExecutor.executeNamedQuery("qryLectraSze", params, QryLectraSzeResponse.class);
    }

    @Transactional(value = "pfsdbTransactionManager", readOnly = true)
    @Override
    public Page<QryCutlcnResponse> executeQryCutlcn(Pageable pageable) {
        Map<String, Object> params = new HashMap<>(0);


        return queryExecutor.executeNamedQuery("qryCutlcn", params, QryCutlcnResponse.class, pageable);
    }

    @Transactional(value = "pfsdbTransactionManager", timeout = 300, readOnly = true)
    @Override
    public void exportQryCutlcn(ExportOptions exportOptions, Pageable pageable, OutputStream outputStream) {
        Map<String, Object> params = new HashMap<>(0);


        QueryProcedureInput queryInput = new QueryProcedureInput("qryCutlcn", params, QryCutlcnResponse.class);

        queryExecutor.exportNamedQueryData(queryInput, exportOptions, pageable, outputStream);
    }

    @Transactional(value = "pfsdbTransactionManager", readOnly = true)
    @Override
    public QryGetCutfabResponse executeQryGetCUTFAB(String pordnum, Integer pclrseqg, String pgmtseq) {
        Map<String, Object> params = new HashMap<>(3);

        params.put("pOrdnum", pordnum);
        params.put("pClrseqg", pclrseqg);
        params.put("pGmtseq", pgmtseq);

        return queryExecutor.executeNamedQuery("qryGetCUTFAB", params, QryGetCutfabResponse.class);
    }

    @Transactional(value = "pfsdbTransactionManager", readOnly = true)
    @Override
    public QryCu220TrftypResponse executeQryCU220_Trftyp(String psdyejob, String pddyejob, Integer psfabseq) {
        Map<String, Object> params = new HashMap<>(3);

        params.put("p_Sdyejob", psdyejob);
        params.put("p_Ddyejob", pddyejob);
        params.put("p_Sfabseq", psfabseq);

        return queryExecutor.executeNamedQuery("qryCU220_Trftyp", params, QryCu220TrftypResponse.class);
    }

    @Transactional(value = "pfsdbTransactionManager", readOnly = true)
    @Override
    public QrySzeDesResponse executeQrySzeDes(String pdyejob, String pgmtseq, Integer pclrseqg, Integer pfabseq, Integer pcutseq) {
        Map<String, Object> params = new HashMap<>(5);

        params.put("pDyejob", pdyejob);
        params.put("pGmtseq", pgmtseq);
        params.put("pClrseqg", pclrseqg);
        params.put("pFabseq", pfabseq);
        params.put("pCutseq", pcutseq);

        return queryExecutor.executeNamedQuery("qrySzeDes", params, QrySzeDesResponse.class);
    }

    @Transactional(value = "pfsdbTransactionManager", readOnly = true)
    @Override
    public QryUserLocationResponse executeQryUserLocation(String pusrid) {
        Map<String, Object> params = new HashMap<>(1);

        params.put("pUsrid", pusrid);

        return queryExecutor.executeNamedQuery("qryUserLocation", params, QryUserLocationResponse.class);
    }

    @Transactional(value = "pfsdbTransactionManager", readOnly = true)
    @Override
    public Page<QryGetItemcodResponse> executeQryGetItemcod(Pageable pageable) {
        Map<String, Object> params = new HashMap<>(0);


        return queryExecutor.executeNamedQuery("qryGetItemcod", params, QryGetItemcodResponse.class, pageable);
    }

    @Transactional(value = "pfsdbTransactionManager", timeout = 300, readOnly = true)
    @Override
    public void exportQryGetItemcod(ExportOptions exportOptions, Pageable pageable, OutputStream outputStream) {
        Map<String, Object> params = new HashMap<>(0);


        QueryProcedureInput queryInput = new QueryProcedureInput("qryGetItemcod", params, QryGetItemcodResponse.class);

        queryExecutor.exportNamedQueryData(queryInput, exportOptions, pageable, outputStream);
    }

}