/*Copyright (c) 2016-2017 cmt.mu All Rights Reserved.
 This software is the confidential and proprietary information of cmt.mu You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with cmt.mu*/
package com.mu.cmt.pfs.pfsdb.service;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/

import java.io.OutputStream;
import java.util.List;
import java.util.Map;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;
import org.springframework.validation.annotation.Validated;

import com.wavemaker.runtime.data.dao.WMGenericDao;
import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.export.DataExportOptions;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.model.AggregationInfo;
import com.wavemaker.runtime.file.model.Downloadable;

import com.mu.cmt.pfs.pfsdb.Cut905;
import com.mu.cmt.pfs.pfsdb.Cut905Id;


/**
 * ServiceImpl object for domain model class Cut905.
 *
 * @see Cut905
 */
@Service("pfsdb.Cut905Service")
@Validated
public class Cut905ServiceImpl implements Cut905Service {

    private static final Logger LOGGER = LoggerFactory.getLogger(Cut905ServiceImpl.class);


    @Autowired
    @Qualifier("pfsdb.Cut905Dao")
    private WMGenericDao<Cut905, Cut905Id> wmGenericDao;

    public void setWMGenericDao(WMGenericDao<Cut905, Cut905Id> wmGenericDao) {
        this.wmGenericDao = wmGenericDao;
    }

    @Transactional(value = "pfsdbTransactionManager")
    @Override
    public Cut905 create(Cut905 cut905) {
        LOGGER.debug("Creating a new Cut905 with information: {}", cut905);

        Cut905 cut905Created = this.wmGenericDao.create(cut905);
        // reloading object from database to get database defined & server defined values.
        return this.wmGenericDao.refresh(cut905Created);
    }

    @Transactional(readOnly = true, value = "pfsdbTransactionManager")
    @Override
    public Cut905 getById(Cut905Id cut905Id) {
        LOGGER.debug("Finding Cut905 by id: {}", cut905Id);
        return this.wmGenericDao.findById(cut905Id);
    }

    @Transactional(readOnly = true, value = "pfsdbTransactionManager")
    @Override
    public Cut905 findById(Cut905Id cut905Id) {
        LOGGER.debug("Finding Cut905 by id: {}", cut905Id);
        try {
            return this.wmGenericDao.findById(cut905Id);
        } catch (EntityNotFoundException ex) {
            LOGGER.debug("No Cut905 found with id: {}", cut905Id, ex);
            return null;
        }
    }

    @Transactional(readOnly = true, value = "pfsdbTransactionManager")
    @Override
    public List<Cut905> findByMultipleIds(List<Cut905Id> cut905Ids, boolean orderedReturn) {
        LOGGER.debug("Finding Cut905s by ids: {}", cut905Ids);

        return this.wmGenericDao.findByMultipleIds(cut905Ids, orderedReturn);
    }


    @Transactional(rollbackFor = EntityNotFoundException.class, value = "pfsdbTransactionManager")
    @Override
    public Cut905 update(Cut905 cut905) {
        LOGGER.debug("Updating Cut905 with information: {}", cut905);

        this.wmGenericDao.update(cut905);
        this.wmGenericDao.refresh(cut905);

        return cut905;
    }

    @Transactional(value = "pfsdbTransactionManager")
    @Override
    public Cut905 delete(Cut905Id cut905Id) {
        LOGGER.debug("Deleting Cut905 with id: {}", cut905Id);
        Cut905 deleted = this.wmGenericDao.findById(cut905Id);
        if (deleted == null) {
            LOGGER.debug("No Cut905 found with id: {}", cut905Id);
            throw new EntityNotFoundException(String.valueOf(cut905Id));
        }
        this.wmGenericDao.delete(deleted);
        return deleted;
    }

    @Transactional(value = "pfsdbTransactionManager")
    @Override
    public void delete(Cut905 cut905) {
        LOGGER.debug("Deleting Cut905 with {}", cut905);
        this.wmGenericDao.delete(cut905);
    }

    @Transactional(readOnly = true, value = "pfsdbTransactionManager")
    @Override
    public Page<Cut905> findAll(QueryFilter[] queryFilters, Pageable pageable) {
        LOGGER.debug("Finding all Cut905s");
        return this.wmGenericDao.search(queryFilters, pageable);
    }

    @Transactional(readOnly = true, value = "pfsdbTransactionManager")
    @Override
    public Page<Cut905> findAll(String query, Pageable pageable) {
        LOGGER.debug("Finding all Cut905s");
        return this.wmGenericDao.searchByQuery(query, pageable);
    }

    @Transactional(readOnly = true, value = "pfsdbTransactionManager", timeout = 300)
    @Override
    public Downloadable export(ExportType exportType, String query, Pageable pageable) {
        LOGGER.debug("exporting data in the service pfsdb for table Cut905 to {} format", exportType);
        return this.wmGenericDao.export(exportType, query, pageable);
    }

    @Transactional(readOnly = true, value = "pfsdbTransactionManager", timeout = 300)
    @Override
    public void export(DataExportOptions options, Pageable pageable, OutputStream outputStream) {
        LOGGER.debug("exporting data in the service pfsdb for table Cut905 to {} format", options.getExportType());
        this.wmGenericDao.export(options, pageable, outputStream);
    }

    @Transactional(readOnly = true, value = "pfsdbTransactionManager")
    @Override
    public long count(String query) {
        return this.wmGenericDao.count(query);
    }

    @Transactional(readOnly = true, value = "pfsdbTransactionManager")
    @Override
    public Page<Map<String, Object>> getAggregatedValues(AggregationInfo aggregationInfo, Pageable pageable) {
        return this.wmGenericDao.getAggregatedValues(aggregationInfo, pageable);
    }



}