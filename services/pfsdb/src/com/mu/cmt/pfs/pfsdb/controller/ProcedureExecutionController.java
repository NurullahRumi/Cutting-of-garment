/*Copyright (c) 2016-2017 cmt.mu All Rights Reserved.
 This software is the confidential and proprietary information of cmt.mu You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with cmt.mu*/
package com.mu.cmt.pfs.pfsdb.controller;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/

import java.sql.Date;

import javax.servlet.http.HttpServletRequest;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RestController;

import com.wavemaker.tools.api.core.annotations.WMAccessVisibility;
import com.wavemaker.tools.api.core.models.AccessSpecifier;
import com.wordnik.swagger.annotations.Api;
import com.wordnik.swagger.annotations.ApiOperation;

import com.mu.cmt.pfs.pfsdb.service.PfsdbProcedureExecutorService;
import com.mu.cmt.pfs.pfsdb.models.procedure.*;

@RestController(value = "Pfsdb.ProcedureExecutionController")
@RequestMapping("/pfsdb/procedureExecutor")
@Api(value = "ProcedureExecutionController", description = "controller class for procedure execution")
public class ProcedureExecutionController {

    private static final Logger LOGGER = LoggerFactory.getLogger(ProcedureExecutionController.class);

    @Autowired
    private PfsdbProcedureExecutorService procedureService;

    @RequestMapping(value = "/procedure/execute/procCU1000PK0_QryCUFabReceived", method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @ApiOperation(value = "Get Qry CU Fab Received")
    public ProcCu1000pk0QryCufabReceivedResponse executeProcCU1000PK0_QryCUFabReceived(@RequestParam(value = "pUserId", required = false) String puserId, @RequestParam(value = "pProgId", required = false) String pprogId, @RequestParam(value = "pOrdnum", required = false) String pordnum, @RequestParam(value = "pDyejob", required = false) String pdyejob, @RequestParam(value = "pCutsts", required = false) String pcutsts, HttpServletRequest _request) {
        LOGGER.debug("Executing named procedure: procCU1000PK0_QryCUFabReceived");
        ProcCu1000pk0QryCufabReceivedResponse _result = procedureService.executeProcCU1000PK0_QryCUFabReceived(puserId, pprogId, pordnum, pdyejob, pcutsts);
        LOGGER.debug("got the result for named procedure: procCU1000PK0_QryCUFabReceived, result:{}", _result);
        return _result;
    }

    @RequestMapping(value = "/procedure/execute/procCU210PK0_CancelCU_Transfer", method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @ApiOperation(value = "Cancel CU_Transfer")
    public Void executeProcCU210PK0_CancelCU_Transfer(@RequestParam(value = "p_sdyejob", required = false) String psdyejob, @RequestParam(value = "p_ddyejob", required = false) String pddyejob, @RequestParam(value = "p_dordnum", required = false) String pdordnum, @RequestParam(value = "p_sfabseq", required = false) Integer psfabseq, @RequestParam(value = "p_usrid", required = false) String pusrid, @RequestParam(value = "p_reason", required = false) String preason, HttpServletRequest _request) {
        LOGGER.debug("Executing named procedure: procCU210PK0_CancelCU_Transfer");
        Void _result = procedureService.executeProcCU210PK0_CancelCU_Transfer(psdyejob, pddyejob, pdordnum, psfabseq, pusrid, preason);
        LOGGER.debug("got the result for named procedure: procCU210PK0_CancelCU_Transfer, result:{}", _result);
        return _result;
    }

    @RequestMapping(value = "/procedure/execute/procCU1000pk0_qryJobCutOrder", method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @ApiOperation(value = "query order + param dyejob")
    public ProcCu1000pk0QryJobCutOrderResponse executeProcCU1000pk0_qryJobCutOrder(@RequestParam(value = "pProgId", required = false) String pprogId, @RequestParam(value = "pOrdnum", required = false) String pordnum, @RequestParam(value = "pDyejob", required = false) String pdyejob, HttpServletRequest _request) {
        LOGGER.debug("Executing named procedure: procCU1000pk0_qryJobCutOrder");
        ProcCu1000pk0QryJobCutOrderResponse _result = procedureService.executeProcCU1000pk0_qryJobCutOrder(pprogId, pordnum, pdyejob);
        LOGGER.debug("got the result for named procedure: procCU1000pk0_qryJobCutOrder, result:{}", _result);
        return _result;
    }

    @RequestMapping(value = "/procedure/execute/procCU1000PK0_UpdFabReceived", method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @ApiOperation(value = "Update Fab Received")
    public Void executeProcCU1000PK0_UpdFabReceived(@RequestParam(value = "pUserId", required = false) String puserId, @RequestParam(value = "pProgId", required = false) String pprogId, @RequestParam(value = "pDyejob") String pdyejob, @RequestParam(value = "pFabseq", required = false) Integer pfabseq, @RequestParam(value = "pRecseq", required = false) Integer precseq, @RequestParam(value = "pNewCutsts", required = false) String pnewCutsts, @RequestParam(value = "pNewKgsWgh", required = false) Double pnewKgsWgh, @RequestParam(value = "pNewRemarks", required = false) String pnewRemarks, HttpServletRequest _request) {
        LOGGER.debug("Executing named procedure: procCU1000PK0_UpdFabReceived");
        Void _result = procedureService.executeProcCU1000PK0_UpdFabReceived(puserId, pprogId, pdyejob, pfabseq, precseq, pnewCutsts, pnewKgsWgh, pnewRemarks);
        LOGGER.debug("got the result for named procedure: procCU1000PK0_UpdFabReceived, result:{}", _result);
        return _result;
    }

    @RequestMapping(value = "/procedure/execute/procCU900pk0_InsNewDyejob", method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @ApiOperation(value = "Insert New Dyejob")
    public Void executeProcCU900pk0_InsNewDyejob(@RequestParam(value = "pUsrid", required = false) String pusrid, @RequestParam(value = "pPrgid", required = false) String pprgid, @RequestParam(value = "pDyejob", required = false) String pdyejob, @RequestParam(value = "pOrdnum", required = false) String pordnum, @RequestParam(value = "pGmtseq", required = false) String pgmtseq, @RequestParam(value = "pClrseqg", required = false) Integer pclrseqg, @RequestParam(value = "pFabseq", required = false) Integer pfabseq, @RequestParam(value = "pCutlcn", required = false) String pcutlcn, @RequestParam(value = "pRdyejob", required = false) String prdyejob, HttpServletRequest _request) {
        LOGGER.debug("Executing named procedure: procCU900pk0_InsNewDyejob");
        Void _result = procedureService.executeProcCU900pk0_InsNewDyejob(pusrid, pprgid, pdyejob, pordnum, pgmtseq, pclrseqg, pfabseq, pcutlcn, prdyejob);
        LOGGER.debug("got the result for named procedure: procCU900pk0_InsNewDyejob, result:{}", _result);
        return _result;
    }

    @RequestMapping(value = "/procedure/execute/procCU1000PK0_QueryJobscut", method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @ApiOperation(value = "get Query Jobscut")
    public ProcCu1000pk0QueryJobscutResponse executeProcCU1000PK0_QueryJobscut(@RequestParam(value = "pUserId", required = false) String puserId, @RequestParam(value = "pProgId", required = false) String pprogId, @RequestParam(value = "pOrdnum", required = false) String pordnum, @RequestParam(value = "pFabseq", required = false) String pfabseq, @RequestParam(value = "pDyejob", required = false) String pdyejob, HttpServletRequest _request) {
        LOGGER.debug("Executing named procedure: procCU1000PK0_QueryJobscut");
        ProcCu1000pk0QueryJobscutResponse _result = procedureService.executeProcCU1000PK0_QueryJobscut(puserId, pprogId, pordnum, pfabseq, pdyejob);
        LOGGER.debug("got the result for named procedure: procCU1000PK0_QueryJobscut, result:{}", _result);
        return _result;
    }

    @RequestMapping(value = "/procedure/execute/procCU1000PK0_LastJobRemarksDetail", method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @ApiOperation(value = "Get Last Job Remarks Dedtail")
    public ProcCu1000pk0LastJobRemarksDetailResponse executeProcCU1000PK0_LastJobRemarksDetail(@RequestParam(value = "pUserId", required = false) String puserId, @RequestParam(value = "pProgId", required = false) String pprogId, @RequestParam(value = "pORDNUM", required = false) String pordnum, @RequestParam(value = "pCLRSEQG", required = false) Integer pclrseqg, @RequestParam(value = "pGMTSEQ", required = false) String pgmtseq, HttpServletRequest _request) {
        LOGGER.debug("Executing named procedure: procCU1000PK0_LastJobRemarksDetail");
        ProcCu1000pk0LastJobRemarksDetailResponse _result = procedureService.executeProcCU1000PK0_LastJobRemarksDetail(puserId, pprogId, pordnum, pclrseqg, pgmtseq);
        LOGGER.debug("got the result for named procedure: procCU1000PK0_LastJobRemarksDetail, result:{}", _result);
        return _result;
    }

    @RequestMapping(value = "/procedure/execute/procCU100PK0_GetLastRemDet", method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @ApiOperation(value = "procCU100PK0_GetLastRemDet")
    public ProcCu100pk0GetLastRemDetResponse executeProcCU100PK0_GetLastRemDet(@RequestParam(value = "pUserId", required = false) String puserId, @RequestParam(value = "pProgId", required = false) String pprogId, @RequestParam(value = "pORDNUM", required = false) String pordnum, @RequestParam(value = "pCLRSEQG", required = false) Integer pclrseqg, @RequestParam(value = "pGMTSEQ", required = false) String pgmtseq, HttpServletRequest _request) {
        LOGGER.debug("Executing named procedure: procCU100PK0_GetLastRemDet");
        ProcCu100pk0GetLastRemDetResponse _result = procedureService.executeProcCU100PK0_GetLastRemDet(puserId, pprogId, pordnum, pclrseqg, pgmtseq);
        LOGGER.debug("got the result for named procedure: procCU100PK0_GetLastRemDet, result:{}", _result);
        return _result;
    }

    @RequestMapping(value = "/procedure/execute/procCU1000PK0_GetCU900AvailMarkers", method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @ApiOperation(value = "Get CU900 Available Markers")
    public ProcCu1000pk0GetCu900availMarkersResponse executeProcCU1000PK0_GetCU900AvailMarkers(@RequestParam(value = "pUserId", required = false) String puserId, @RequestParam(value = "pProgId", required = false) String pprogId, @RequestParam(value = "pDYEJOB", required = false) String pdyejob, HttpServletRequest _request) {
        LOGGER.debug("Executing named procedure: procCU1000PK0_GetCU900AvailMarkers");
        ProcCu1000pk0GetCu900availMarkersResponse _result = procedureService.executeProcCU1000PK0_GetCU900AvailMarkers(puserId, pprogId, pdyejob);
        LOGGER.debug("got the result for named procedure: procCU1000PK0_GetCU900AvailMarkers, result:{}", _result);
        return _result;
    }

    @RequestMapping(value = "/procedure/execute/procCU210PK0_QueryJobTransfers", method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @ApiOperation(value = "Get Job Transfers")
    public ProcCu210pk0QueryJobTransfersResponse executeProcCU210PK0_QueryJobTransfers(@RequestParam(value = "pUserId", required = false) String puserId, @RequestParam(value = "pProgId", required = false) String pprogId, @RequestParam(value = "pSORDNUM", required = false) String psordnum, @RequestParam(value = "pSDYEJOB", required = false) String psdyejob, @RequestParam(value = "pDORDNUM", required = false) String pdordnum, @RequestParam(value = "pDDYEJOB", required = false) String pddyejob, HttpServletRequest _request) {
        LOGGER.debug("Executing named procedure: procCU210PK0_QueryJobTransfers");
        ProcCu210pk0QueryJobTransfersResponse _result = procedureService.executeProcCU210PK0_QueryJobTransfers(puserId, pprogId, psordnum, psdyejob, pdordnum, pddyejob);
        LOGGER.debug("got the result for named procedure: procCU210PK0_QueryJobTransfers, result:{}", _result);
        return _result;
    }

    @RequestMapping(value = "/procedure/execute/procCU210PK0_UpdCqReamrks", method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @ApiOperation(value = "Update CQ Remarks")
    public Void executeProcCU210PK0_UpdCqReamrks(@RequestParam(value = "pUserId", required = false) String puserId, @RequestParam(value = "pProgId", required = false) String pprogId, @RequestParam(value = "pSDYEJOB", required = false) String psdyejob, @RequestParam(value = "pSFABSEQ", required = false) String psfabseq, @RequestParam(value = "pDDYEJOB", required = false) String pddyejob, @RequestParam(value = "pTRFTYP", required = false) String ptrftyp, @RequestParam(value = "pCQREMARKS", required = false) String pcqremarks, HttpServletRequest _request) {
        LOGGER.debug("Executing named procedure: procCU210PK0_UpdCqReamrks");
        Void _result = procedureService.executeProcCU210PK0_UpdCqReamrks(puserId, pprogId, psdyejob, psfabseq, pddyejob, ptrftyp, pcqremarks);
        LOGGER.debug("got the result for named procedure: procCU210PK0_UpdCqReamrks, result:{}", _result);
        return _result;
    }

    @RequestMapping(value = "/procedure/execute/procCU1000PK0_LastJobRemarks", method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @ApiOperation(value = "Last Job Remarks")
    public ProcCu1000pk0LastJobRemarksResponse executeProcCU1000PK0_LastJobRemarks(@RequestParam(value = "pUserId", required = false) String puserId, @RequestParam(value = "pProgId", required = false) String pprogId, @RequestParam(value = "pORDNUM", required = false) String pordnum, @RequestParam(value = "pCLRSEQ", required = false) Integer pclrseq, @RequestParam(value = "pGMTSEQ", required = false) String pgmtseq, HttpServletRequest _request) {
        LOGGER.debug("Executing named procedure: procCU1000PK0_LastJobRemarks");
        ProcCu1000pk0LastJobRemarksResponse _result = procedureService.executeProcCU1000PK0_LastJobRemarks(puserId, pprogId, pordnum, pclrseq, pgmtseq);
        LOGGER.debug("got the result for named procedure: procCU1000PK0_LastJobRemarks, result:{}", _result);
        return _result;
    }

    @RequestMapping(value = "/procedure/execute/procCU1000PK0_sproc_get_lastremark_cutsts", method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @ApiOperation(value = "e")
    public ProcCu1000pk0SprocGetLastremarkCutstsResponse executeProcCU1000PK0_sproc_get_lastremark_cutsts(HttpServletRequest _request) {
        LOGGER.debug("Executing named procedure: procCU1000PK0_sproc_get_lastremark_cutsts");
        ProcCu1000pk0SprocGetLastremarkCutstsResponse _result = procedureService.executeProcCU1000PK0_sproc_get_lastremark_cutsts();
        LOGGER.debug("got the result for named procedure: procCU1000PK0_sproc_get_lastremark_cutsts, result:{}", _result);
        return _result;
    }

    @RequestMapping(value = "/procedure/execute/procCU900pk0_CreateAutoMarker", method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @ApiOperation(value = "Create Auto Marker")
    public Void executeProcCU900pk0_CreateAutoMarker(@RequestParam(value = "p_dyejob", required = false) String pdyejob, @RequestParam(value = "p_gmtseq", required = false) String pgmtseq, @RequestParam(value = "p_clrseqg", required = false) Integer pclrseqg, @RequestParam(value = "p_fabseq", required = false) Integer pfabseq, @RequestParam(value = "p_cutseq", required = false) Integer pcutseq, @RequestParam(value = "p_ordnum", required = false) String pordnum, @RequestParam(value = "p_modelvariant", required = false) String pmodelvariant, @RequestParam(value = "p_model_fabtyp", required = false) String pmodelFabtyp, @RequestParam(value = "p_fabcode", required = false) String pfabcode, @RequestParam(value = "p_fromwid", required = false) Integer pfromwid, @RequestParam(value = "p_towid", required = false) Integer ptowid, @RequestParam(value = "p_lcncod", required = false) String plcncod, @RequestParam(value = "p_usrid", required = false) String pusrid, @RequestParam(value = "p_stage", required = false) String pstage, @RequestParam(value = "p_fabconstraint", required = false) String pfabconstraint, @RequestParam(value = "p_night_schedule", required = false) String pnightSchedule, HttpServletRequest _request) {
        LOGGER.debug("Executing named procedure: procCU900pk0_CreateAutoMarker");
        Void _result = procedureService.executeProcCU900pk0_CreateAutoMarker(pdyejob, pgmtseq, pclrseqg, pfabseq, pcutseq, pordnum, pmodelvariant, pmodelFabtyp, pfabcode, pfromwid, ptowid, plcncod, pusrid, pstage, pfabconstraint, pnightSchedule);
        LOGGER.debug("got the result for named procedure: procCU900pk0_CreateAutoMarker, result:{}", _result);
        return _result;
    }

    @RequestMapping(value = "/procedure/execute/procCU1000PK0_GetCU900Dyejob", method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @ApiOperation(value = "Get cu900 Dyejob")
    public ProcCu1000pk0GetCu900dyejobResponse executeProcCU1000PK0_GetCU900Dyejob(@RequestParam(value = "pUserId", required = false) String puserId, @RequestParam(value = "pProgId", required = false) String pprogId, @RequestParam(value = "pORDNUM", required = false) String pordnum, @RequestParam(value = "pDYEJOB", required = false) String pdyejob, @RequestParam(value = "pFROMDATE", required = false) Date pfromdate, @RequestParam(value = "pTODATE", required = false) Date ptodate, @RequestParam(value = "pFilterType", required = false) String pfilterType, HttpServletRequest _request) {
        LOGGER.debug("Executing named procedure: procCU1000PK0_GetCU900Dyejob");
        ProcCu1000pk0GetCu900dyejobResponse _result = procedureService.executeProcCU1000PK0_GetCU900Dyejob(puserId, pprogId, pordnum, pdyejob, pfromdate, ptodate, pfilterType);
        LOGGER.debug("got the result for named procedure: procCU1000PK0_GetCU900Dyejob, result:{}", _result);
        return _result;
    }

    @RequestMapping(value = "/procedure/execute/procCU1000PK0_QryCutBySize_OrderDet", method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @ApiOperation(value = "Query Cut By Size Order Det")
    public ProcCu1000pk0QryCutBySizeOrderDetResponse executeProcCU1000PK0_QryCutBySize_OrderDet(@RequestParam(value = "pUserId", required = false) String puserId, @RequestParam(value = "pProgId", required = false) String pprogId, @RequestParam(value = "pOrdnum", required = false) String pordnum, @RequestParam(value = "pColour", required = false) Integer pcolour, @RequestParam(value = "pGarment", required = false) String pgarment, HttpServletRequest _request) {
        LOGGER.debug("Executing named procedure: procCU1000PK0_QryCutBySize_OrderDet");
        ProcCu1000pk0QryCutBySizeOrderDetResponse _result = procedureService.executeProcCU1000PK0_QryCutBySize_OrderDet(puserId, pprogId, pordnum, pcolour, pgarment);
        LOGGER.debug("got the result for named procedure: procCU1000PK0_QryCutBySize_OrderDet, result:{}", _result);
        return _result;
    }

    @RequestMapping(value = "/procedure/execute/procCU900pk0_InsSizes", method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @ApiOperation(value = "Insert Ins Sizes")
    public Void executeProcCU900pk0_InsSizes(@RequestParam(value = "p_dyejob", required = false) String pdyejob, @RequestParam(value = "p_gmtseq", required = false) String pgmtseq, @RequestParam(value = "p_clrseqg", required = false) Integer pclrseqg, @RequestParam(value = "p_fabseq", required = false) Integer pfabseq, @RequestParam(value = "p_cutseq", required = false) Integer pcutseq, @RequestParam(value = "p_ordnum", required = false) String pordnum, HttpServletRequest _request) {
        LOGGER.debug("Executing named procedure: procCU900pk0_InsSizes");
        Void _result = procedureService.executeProcCU900pk0_InsSizes(pdyejob, pgmtseq, pclrseqg, pfabseq, pcutseq, pordnum);
        LOGGER.debug("got the result for named procedure: procCU900pk0_InsSizes, result:{}", _result);
        return _result;
    }

    @RequestMapping(value = "/procedure/execute/procCu1000pk0psproc_call_makeupmain_page", method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @ApiOperation(value = "call makeup main screen")
    public ProcCu1000pk0psprocCallMakeupmainPageResponse executeProcCu1000pk0psproc_call_makeupmain_page(HttpServletRequest _request) {
        LOGGER.debug("Executing named procedure: procCu1000pk0psproc_call_makeupmain_page");
        ProcCu1000pk0psprocCallMakeupmainPageResponse _result = procedureService.executeProcCu1000pk0psproc_call_makeupmain_page();
        LOGGER.debug("got the result for named procedure: procCu1000pk0psproc_call_makeupmain_page, result:{}", _result);
        return _result;
    }

    @RequestMapping(value = "/procedure/execute/procCU1000PK0_QryCuttingBySize", method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @ApiOperation(value = "Get Cutting By Size")
    public ProcCu1000pk0QryCuttingBySizeResponse executeProcCU1000PK0_QryCuttingBySize(@RequestParam(value = "pProgId", required = false) String pprogId, @RequestParam(value = "pOrdnum", required = false) String pordnum, @RequestParam(value = "pColour", required = false) Integer pcolour, @RequestParam(value = "pGarment", required = false) String pgarment, @RequestParam(value = "pFabcat", required = false) String pfabcat, HttpServletRequest _request) {
        LOGGER.debug("Executing named procedure: procCU1000PK0_QryCuttingBySize");
        ProcCu1000pk0QryCuttingBySizeResponse _result = procedureService.executeProcCU1000PK0_QryCuttingBySize(pprogId, pordnum, pcolour, pgarment, pfabcat);
        LOGGER.debug("got the result for named procedure: procCU1000PK0_QryCuttingBySize, result:{}", _result);
        return _result;
    }

    @RequestMapping(value = "/procedure/execute/procCU1000PK0_OrszSizes", method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @ApiOperation(value = "Get Orsz Sizes")
    public ProcCu1000pk0OrszSizesResponse executeProcCU1000PK0_OrszSizes(@RequestParam(value = "pUserId", required = false) String puserId, @RequestParam(value = "pProgId", required = false) String pprogId, @RequestParam(value = "pOrdnum", required = false) String pordnum, HttpServletRequest _request) {
        LOGGER.debug("Executing named procedure: procCU1000PK0_OrszSizes");
        ProcCu1000pk0OrszSizesResponse _result = procedureService.executeProcCU1000PK0_OrszSizes(puserId, pprogId, pordnum);
        LOGGER.debug("got the result for named procedure: procCU1000PK0_OrszSizes, result:{}", _result);
        return _result;
    }

    @RequestMapping(value = "/procedure/execute/procCU1000PK0_UpdRemarks", method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @ApiOperation(value = "Update Remarks for Detail Block")
    public Void executeProcCU1000PK0_UpdRemarks(@RequestParam(value = "pUserId", required = false) String puserId, @RequestParam(value = "pProgId", required = false) String pprogId, @RequestParam(value = "pORDNUM", required = false) String pordnum, @RequestParam(value = "pCLRSEQG", required = false) Integer pclrseqg, @RequestParam(value = "pGMTSEQ", required = false) String pgmtseq, @RequestParam(value = "pCUTREM", required = false) String pcutrem, @RequestParam(value = "pCUTLCN", required = false) String pcutlcn, @RequestParam(value = "pCUTSTS", required = false) String pcutsts, @RequestParam(value = "pMAKREM", required = false) String pmakrem, @RequestParam(value = "pULDREM", required = false) String puldrem, @RequestParam(value = "pEMBREM", required = false) String pembrem, @RequestParam(value = "pCUTEXC", required = false) String pcutexc, @RequestParam(value = "pMAKEXC", required = false) String pmakexc, @RequestParam(value = "pULDEXC", required = false) String puldexc, @RequestParam(value = "pEMBEXC", required = false) String pembexc, HttpServletRequest _request) {
        LOGGER.debug("Executing named procedure: procCU1000PK0_UpdRemarks");
        Void _result = procedureService.executeProcCU1000PK0_UpdRemarks(puserId, pprogId, pordnum, pclrseqg, pgmtseq, pcutrem, pcutlcn, pcutsts, pmakrem, puldrem, pembrem, pcutexc, pmakexc, puldexc, pembexc);
        LOGGER.debug("got the result for named procedure: procCU1000PK0_UpdRemarks, result:{}", _result);
        return _result;
    }

}